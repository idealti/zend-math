{
    "docs": [
        {
            "location": "/",
            "text": "zend-math\n\n\n\n\n\n\nZend\\Math\n provides general mathematical functions. So far the supported\nfunctionalities are:\n\n\n\n\nZend\\Math\\Rand\n, a random number generator;\n\n\nZend\\Math\\BigInteger\n, a library to manage big integers.\n\n\n\n\nMigration notes from v2 to v3\n\n\nWe document migration notes from v2 to v3\n,\nproviding details of potential BC breaks and/or API differences\nyou may need to be aware of.\n\n\nMiscellany\n\n\n\n\nFile issues at https://github.com/zendframework/zend-math/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-math/",
            "title": "zend-math"
        },
        {
            "location": "/#zend-math",
            "text": "Zend\\Math  provides general mathematical functions. So far the supported\nfunctionalities are:   Zend\\Math\\Rand , a random number generator;  Zend\\Math\\BigInteger , a library to manage big integers.",
            "title": "zend-math"
        },
        {
            "location": "/#migration-notes-from-v2-to-v3",
            "text": "We document migration notes from v2 to v3 ,\nproviding details of potential BC breaks and/or API differences\nyou may need to be aware of.",
            "title": "Migration notes from v2 to v3"
        },
        {
            "location": "/#miscellany",
            "text": "File issues at https://github.com/zendframework/zend-math/issues  Documentation is at https://docs.zendframework.com/zend-math/",
            "title": "Miscellany"
        },
        {
            "location": "/intro/",
            "text": "Introduction\n\n\nzend-math provides general mathematical functions. So far the supported\nfunctionalities are:\n\n\n\n\nZend\\Math\\Rand\n, a random number generator;\n\n\nZend\\Math\\BigInteger\n, a library to manage big integers.\n\n\n\n\nWe expect to add more functionalities in the future.",
            "title": "Intro"
        },
        {
            "location": "/intro/#introduction",
            "text": "zend-math provides general mathematical functions. So far the supported\nfunctionalities are:   Zend\\Math\\Rand , a random number generator;  Zend\\Math\\BigInteger , a library to manage big integers.   We expect to add more functionalities in the future.",
            "title": "Introduction"
        },
        {
            "location": "/rand/",
            "text": "Random Number Generation\n\n\nZend\\Math\\Rand\n implements a random number generator that is able to generate\nrandom numbers for general purpose usage and for cryptographic scopes. To\ngenerate good random numbers, this component uses different approaches. If PHP 7\nis running, we use the cryptographically secure pseudo-random functions\n\nrandom_bytes()\n and\n\nrandom_int()\n.\n\n\nFor PHP 5 versions, we use \nparagonie/random_compat\n,\nwhich delegates to the \nMcrypt\n extension or a\n\n/dev/urandom\n or similar source.  If you don't have a secure random source in\nyour environment, the functionality will raise an exception, providing hints\nregarding extensions it can use.\n\n\nMethods available\n\n\nThe \nZend\\Math\\Rand\n class offers the following methods to generate random values:\n\n\n\n\ngetBytes($length)\n to generate a random set of \n$length\n bytes;\n\n\ngetBoolean()\n to generate a random boolean value (true or false);\n\n\ngetInteger($min, $max)\n to generate a random integer between \n$min\n and \n$max\n;\n\n\ngetFloat()\n to generate a random float number between 0 and 1;\n\n\ngetString($length, $charlist = null)\n to generate a random string of $length\n  characters using the alphabet \n$charlist\n; if not provided, the default alphabet is the\n  \nBase64\n character set.\n\n\n\n\nExamples\n\n\nThe example below demonstrates generating random data using \nZend\\Math\\Rand\n:\n\n\nuse Zend\\Math\\Rand;\n\n$bytes = Rand::getBytes(32);\nprintf(\"Random bytes (in Base64): %s\\n\", base64_encode($bytes));\n\n$boolean = Rand::getBoolean();\nprintf(\"Random boolean: %s\\n\", $boolean ? 'true' : 'false');\n\n$integer = Rand::getInteger(0, 1000);\nprintf(\"Random integer in [0-1000]: %d\\n\", $integer);\n\n$float = Rand::getFloat();\nprintf(\"Random float in [0-1): %f\\n\", $float);\n\n$string = Rand::getString(32, 'abcdefghijklmnopqrstuvwxyz');\nprintf(\"Random string in latin alphabet: %s\\n\", $string);",
            "title": "Random Number Generation"
        },
        {
            "location": "/rand/#random-number-generation",
            "text": "Zend\\Math\\Rand  implements a random number generator that is able to generate\nrandom numbers for general purpose usage and for cryptographic scopes. To\ngenerate good random numbers, this component uses different approaches. If PHP 7\nis running, we use the cryptographically secure pseudo-random functions random_bytes()  and random_int() .  For PHP 5 versions, we use  paragonie/random_compat ,\nwhich delegates to the  Mcrypt  extension or a /dev/urandom  or similar source.  If you don't have a secure random source in\nyour environment, the functionality will raise an exception, providing hints\nregarding extensions it can use.",
            "title": "Random Number Generation"
        },
        {
            "location": "/rand/#methods-available",
            "text": "The  Zend\\Math\\Rand  class offers the following methods to generate random values:   getBytes($length)  to generate a random set of  $length  bytes;  getBoolean()  to generate a random boolean value (true or false);  getInteger($min, $max)  to generate a random integer between  $min  and  $max ;  getFloat()  to generate a random float number between 0 and 1;  getString($length, $charlist = null)  to generate a random string of $length\n  characters using the alphabet  $charlist ; if not provided, the default alphabet is the\n   Base64  character set.",
            "title": "Methods available"
        },
        {
            "location": "/rand/#examples",
            "text": "The example below demonstrates generating random data using  Zend\\Math\\Rand :  use Zend\\Math\\Rand;\n\n$bytes = Rand::getBytes(32);\nprintf(\"Random bytes (in Base64): %s\\n\", base64_encode($bytes));\n\n$boolean = Rand::getBoolean();\nprintf(\"Random boolean: %s\\n\", $boolean ? 'true' : 'false');\n\n$integer = Rand::getInteger(0, 1000);\nprintf(\"Random integer in [0-1000]: %d\\n\", $integer);\n\n$float = Rand::getFloat();\nprintf(\"Random float in [0-1): %f\\n\", $float);\n\n$string = Rand::getString(32, 'abcdefghijklmnopqrstuvwxyz');\nprintf(\"Random string in latin alphabet: %s\\n\", $string);",
            "title": "Examples"
        },
        {
            "location": "/big-integer/",
            "text": "Big Integers\n\n\nZend\\Math\\BigInteger\\BigInteger\n offers a class to manage arbitrary length\nintegers. PHP supports integer numbers with a maximum value of \nPHP_INT_MAX\n, a\nvalue defined by your processor architecture and available memory. If you need\nto manage integers bigger than \nPHP_INT_MAX\n, you need to use external libraries\nor PHP extensions such as \nGMP\n or \nBC Math\n.\n\n\nZend\\Math\\BigInteger\\BigInteger\n is able to manage big integers using either\nthe GMP or the BC Math extensions as adapters.\n\n\nMethods available\n\n\nThe mathematical functions implemented in \nZend\\Math\\BigInteger\\BigInteger\n are:\n\n\n\n\nadd($leftOperand, $rightOperand)\n: add two big integers.\n\n\nsub($leftOperand, $rightOperand)\n: subtract two big integers.\n\n\nmul($leftOperand, $rightOperand)\n: multiply two big integers.\n\n\ndiv($leftOperand, $rightOperand)\n: divide two big integers (this method\n  returns only the integer part of result).\n\n\npow($operand, $exp)\n: raise one big integer using the other big integer as\n  the exponent.\n\n\nsqrt($operand)\n: get the square root of a big integer.\n\n\nabs($operand)\n: get the absolute value of a big integer.\n\n\nmod($leftOperand, $modulus)\n: get the modulus of dividing one big integer by\n  another.\n\n\npowmod($leftOperand, $rightOperand, $modulus)\n: raise a big integer using\n  another big integer as the exponent, and reduce by the specified modulus.\n\n\ncomp($leftOperand, $rightOperand)\n: compare two big integers. Returns < 0\n  if \n$leftOperand\n is less than \n$rightOperand\n; > 0 if \n$leftOperand\n is greater\n  than \n$rightOperand\n; and 0 if they are equal.\n\n\nintToBin($int, $twoc = false)\n: convert a big integer into its binary number\n  representation;\n\n\nbinToInt($bytes, $twoc = false)\n: convert a binary number into a big integer.\n\n\nbaseConvert($operand, $fromBase, $toBase = 10)\n: convert a big integer\n  between arbitrary bases.\n\n\n\n\nExamples\n\n\nThe example below illustrates using the BC Math adapter to calculate the sum of\ntwo random integers with 100 digits each.\n\n\nuse Zend\\Math\\BigInteger\\BigInteger;\nuse Zend\\Math\\Rand;\n\n$bigInt = BigInteger::factory('bcmath');\n\n$x = Rand::getString(100, '0123456789');\n$y = Rand::getString(100, '0123456789');\n\n$sum = $bigInt->add($x, $y);\n$len = strlen($sum);\n\nprintf(\"%{$len}s +\\n%{$len}s =\\n%s\\n%s\\n\", $x, $y, str_repeat('-', $len), $sum);\n\n\n\nNote that the big integers are managed using strings; even the result of the sum\nis represented as a string.\n\n\nNext is an example using the BC Math adapter to generate the binary\nrepresentation of a negative big integer containing 100 digits.\n\n\nuse Zend\\Math\\BigInteger\\BigInteger;\nuse Zend\\Math\\Rand;\n\n$bigInt = BigInteger::factory('bcmath');\n\n$digits = 100;\n$x = '-' . Rand::getString($digits, '0123456789');\n\n$byte = $bigInt->intToBin($x);\n\nprintf(\n    \"The binary representation of a big integer with %d digits:\\n%s\\nis (in Base64 format): %s\\n\",\n    $digits\n    $x,\n    base64_encode($byte)\n);\nprintf(\"Length in bytes: %d\\n\", strlen($byte));\n\n$byte = $bigInt->intToBin($x, true);\n\nprintf(\n    \"The two's complement binary representation of the big integer with %d digits:\\n\"\n    . \"%s\\nis (in Base64 format): %s\\n\",\n    $digits,\n    $x,\n    base64_encode($byte)\n);\nprintf(\"Length in bytes: %d\\n\", strlen($byte));\n\n\n\nThe above generates the binary representation of the big integer number using the\ndefault binary format, and the \ntwo's complement\n\nrepresentation (specified with the \ntrue\n parameter in the \nintToBin\n function).",
            "title": "Big Integers"
        },
        {
            "location": "/big-integer/#big-integers",
            "text": "Zend\\Math\\BigInteger\\BigInteger  offers a class to manage arbitrary length\nintegers. PHP supports integer numbers with a maximum value of  PHP_INT_MAX , a\nvalue defined by your processor architecture and available memory. If you need\nto manage integers bigger than  PHP_INT_MAX , you need to use external libraries\nor PHP extensions such as  GMP  or  BC Math .  Zend\\Math\\BigInteger\\BigInteger  is able to manage big integers using either\nthe GMP or the BC Math extensions as adapters.",
            "title": "Big Integers"
        },
        {
            "location": "/big-integer/#methods-available",
            "text": "The mathematical functions implemented in  Zend\\Math\\BigInteger\\BigInteger  are:   add($leftOperand, $rightOperand) : add two big integers.  sub($leftOperand, $rightOperand) : subtract two big integers.  mul($leftOperand, $rightOperand) : multiply two big integers.  div($leftOperand, $rightOperand) : divide two big integers (this method\n  returns only the integer part of result).  pow($operand, $exp) : raise one big integer using the other big integer as\n  the exponent.  sqrt($operand) : get the square root of a big integer.  abs($operand) : get the absolute value of a big integer.  mod($leftOperand, $modulus) : get the modulus of dividing one big integer by\n  another.  powmod($leftOperand, $rightOperand, $modulus) : raise a big integer using\n  another big integer as the exponent, and reduce by the specified modulus.  comp($leftOperand, $rightOperand) : compare two big integers. Returns < 0\n  if  $leftOperand  is less than  $rightOperand ; > 0 if  $leftOperand  is greater\n  than  $rightOperand ; and 0 if they are equal.  intToBin($int, $twoc = false) : convert a big integer into its binary number\n  representation;  binToInt($bytes, $twoc = false) : convert a binary number into a big integer.  baseConvert($operand, $fromBase, $toBase = 10) : convert a big integer\n  between arbitrary bases.",
            "title": "Methods available"
        },
        {
            "location": "/big-integer/#examples",
            "text": "The example below illustrates using the BC Math adapter to calculate the sum of\ntwo random integers with 100 digits each.  use Zend\\Math\\BigInteger\\BigInteger;\nuse Zend\\Math\\Rand;\n\n$bigInt = BigInteger::factory('bcmath');\n\n$x = Rand::getString(100, '0123456789');\n$y = Rand::getString(100, '0123456789');\n\n$sum = $bigInt->add($x, $y);\n$len = strlen($sum);\n\nprintf(\"%{$len}s +\\n%{$len}s =\\n%s\\n%s\\n\", $x, $y, str_repeat('-', $len), $sum);  Note that the big integers are managed using strings; even the result of the sum\nis represented as a string.  Next is an example using the BC Math adapter to generate the binary\nrepresentation of a negative big integer containing 100 digits.  use Zend\\Math\\BigInteger\\BigInteger;\nuse Zend\\Math\\Rand;\n\n$bigInt = BigInteger::factory('bcmath');\n\n$digits = 100;\n$x = '-' . Rand::getString($digits, '0123456789');\n\n$byte = $bigInt->intToBin($x);\n\nprintf(\n    \"The binary representation of a big integer with %d digits:\\n%s\\nis (in Base64 format): %s\\n\",\n    $digits\n    $x,\n    base64_encode($byte)\n);\nprintf(\"Length in bytes: %d\\n\", strlen($byte));\n\n$byte = $bigInt->intToBin($x, true);\n\nprintf(\n    \"The two's complement binary representation of the big integer with %d digits:\\n\"\n    . \"%s\\nis (in Base64 format): %s\\n\",\n    $digits,\n    $x,\n    base64_encode($byte)\n);\nprintf(\"Length in bytes: %d\\n\", strlen($byte));  The above generates the binary representation of the big integer number using the\ndefault binary format, and the  two's complement \nrepresentation (specified with the  true  parameter in the  intToBin  function).",
            "title": "Examples"
        },
        {
            "location": "/migration/",
            "text": "Migration Guide\n\n\nThe following details the changes from the version 2 series to version 3, and\nhow to prepare for migration.\n\n\nNew requirements for random number generation\n\n\nFor version 3, we changed the random number generator strategy of\n\nZend\\Math\\Rand\n using the \nrandom_int()\n ad \nrandom_bytes()\n functions of PHP\n7. For users still on PHP 5.5+, we now require the\n\nrandom_compact\n library, which\nprovides a polyfill for these new PHP 7 functions.\n\n\next/mbstring required\n\n\nStarting with version 3, we now require\nthe \nmbstring\n\nextension. We added this requirement to ensure that all\nstring manipulations inside zend-math are binary-safe.\n\n\nInternally, we replace all \nstrlen()\n and \nsubstr()\n functions with the\nequivalent \nmb_strlen()\n and \nmb_substr()\n functions, and require \n8bit\n\nencoding.\n\n\nWe removed the $strong optional parameter\n\n\nIn \nZend\\Math\\Rand\n, we removed the usage of the \n$strong\n optional parameter for\nthe random number generator. By default, all random numbers produced in version\n3 releases will use a secure pseudo-random number generator\n(\nCSPRNG\n).\n\n\nThe following lists the functions from which the parameter was removed:\n\n\n\n\nRand::getBytes($length)\n\n\nRand::getBoolean()\n\n\nRand::getInteger($min, $max)\n\n\nRand::getFloat()\n\n\nRand::getString($length, $charlist = null)\n\n\n\n\nIn each case, the \n$strong\n parameter was both optional, and the last argument\nin the list. As PHP allows passing more arguments than the signature accepts,\nthis will not pose a backwards compatibility break; it only means that the\nargument no longer has any meaning.\n\n\nWe recommend removing the parameter from any calls you make to the above\nfunctions after migrating.\n\n\nWe changed the error management in Rand\n\n\nSeveral methods now throw exceptions for error situations:\n\n\n\n\nZend\\Math\\Rand::getBytes($length)\n will no longer return a boolean \nfalse\n when\n  \n$length <= 0\n. Instead, it will now throw a \nZend\\Math\\Exception\\DomainException\n.\n\n\nZend\\Math\\Rand::getBytes($length)\n will now throw a\n  \nZend\\Math\\Exception\\InvalidArgumentException\n if the \n$length\n parameter is\n  not an integer.\n\n\nZend\\Math\\Rand::getInteger($min, $max)\n will now throw a\n  \nZend\\Math\\Exception\\InvalidArgumentException\n if either parameter is not an\n  integer.\n\n\n\n\nAdditionally, in cases where you are not using PHP 7 and your PHP environment\ndoes not provide a secure random source, we now throw a\n\nZend\\Math\\Exception\\RuntimeException\n with the following message:\n\n\nThis PHP environment doesn't support secure random number generation.\nPlease consider upgrading to PHP 7.\n\n\n\nThis message should appear if your are using PHP versions less than 7 on Windows\nmachines without one of the following extensions or libraries installed:\n\n\n\n\nMcrypt\n\n\nlibsodium\n\n\nCAPICOM\n\n\nOpenSSL",
            "title": "Migration"
        },
        {
            "location": "/migration/#migration-guide",
            "text": "The following details the changes from the version 2 series to version 3, and\nhow to prepare for migration.",
            "title": "Migration Guide"
        },
        {
            "location": "/migration/#new-requirements-for-random-number-generation",
            "text": "For version 3, we changed the random number generator strategy of Zend\\Math\\Rand  using the  random_int()  ad  random_bytes()  functions of PHP\n7. For users still on PHP 5.5+, we now require the random_compact  library, which\nprovides a polyfill for these new PHP 7 functions.",
            "title": "New requirements for random number generation"
        },
        {
            "location": "/migration/#extmbstring-required",
            "text": "Starting with version 3, we now require\nthe  mbstring \nextension. We added this requirement to ensure that all\nstring manipulations inside zend-math are binary-safe.  Internally, we replace all  strlen()  and  substr()  functions with the\nequivalent  mb_strlen()  and  mb_substr()  functions, and require  8bit \nencoding.",
            "title": "ext/mbstring required"
        },
        {
            "location": "/migration/#we-removed-the-strong-optional-parameter",
            "text": "In  Zend\\Math\\Rand , we removed the usage of the  $strong  optional parameter for\nthe random number generator. By default, all random numbers produced in version\n3 releases will use a secure pseudo-random number generator\n( CSPRNG ).  The following lists the functions from which the parameter was removed:   Rand::getBytes($length)  Rand::getBoolean()  Rand::getInteger($min, $max)  Rand::getFloat()  Rand::getString($length, $charlist = null)   In each case, the  $strong  parameter was both optional, and the last argument\nin the list. As PHP allows passing more arguments than the signature accepts,\nthis will not pose a backwards compatibility break; it only means that the\nargument no longer has any meaning.  We recommend removing the parameter from any calls you make to the above\nfunctions after migrating.",
            "title": "We removed the $strong optional parameter"
        },
        {
            "location": "/migration/#we-changed-the-error-management-in-rand",
            "text": "Several methods now throw exceptions for error situations:   Zend\\Math\\Rand::getBytes($length)  will no longer return a boolean  false  when\n   $length <= 0 . Instead, it will now throw a  Zend\\Math\\Exception\\DomainException .  Zend\\Math\\Rand::getBytes($length)  will now throw a\n   Zend\\Math\\Exception\\InvalidArgumentException  if the  $length  parameter is\n  not an integer.  Zend\\Math\\Rand::getInteger($min, $max)  will now throw a\n   Zend\\Math\\Exception\\InvalidArgumentException  if either parameter is not an\n  integer.   Additionally, in cases where you are not using PHP 7 and your PHP environment\ndoes not provide a secure random source, we now throw a Zend\\Math\\Exception\\RuntimeException  with the following message:  This PHP environment doesn't support secure random number generation.\nPlease consider upgrading to PHP 7.  This message should appear if your are using PHP versions less than 7 on Windows\nmachines without one of the following extensions or libraries installed:   Mcrypt  libsodium  CAPICOM  OpenSSL",
            "title": "We changed the error management in Rand"
        }
    ]
}